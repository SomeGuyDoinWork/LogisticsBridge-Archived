buildscript { 
    repositories {
        mavenCentral()
	maven {
		url "https://plugins.gradle.org/m2/"
	}
	maven {
		url = 'https://maven.cleanroommc.com'
	}
        maven {
		url = 'https://maven.minecraftforge.net'
	}
	maven { 
		url = 'https://repo.spongepowered.org/maven' 
	}
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_ver}"
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3.4'
        if (project.use_mixins.toBoolean()) {
		classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
	}
	classpath 'io.franzbecker:gradle-lombok:5.0.0'
    }
}

apply plugin: 'io.franzbecker.gradle-lombok'
apply plugin: 'net.minecraftforge.gradle.forge'

if (project.use_mixins.toBoolean()) {
	apply plugin: 'org.spongepowered.mixin'
}

version = project.mod_version
group = project.maven_group
archivesBaseName = project.archives_base_name

sourceCompatibility = targetCompatibility = '1.8'

compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

minecraft {
    version = '1.12.2-14.23.5.2847'
    runDir = 'run'
    mappings channel: 'snapshot', version: '20171120-1.12'
	replace("@VERSION@", project.mod_version)
	def args = []
	if (project.use_coremod.toBoolean()) {
		args << '-Dfml.coreMods.load=' + coremod_plugin_class_name
	}
	if (project.use_mixins.toBoolean()) {
		args << '-Dmixin.hotSwap=true'
		args << '-Dmixin.checks.interfaces=true'
		args << '-Dmixin.debug.export=true'
	}
	clientJvmArgs.addAll(args)
	serverJvmArgs.addAll(args)
}

repositories {
    mavenCentral()
    maven { 
	url = 'https://maven.cleanroommc.com'
    }
    maven {
        url = 'https://repo.spongepowered.org/maven'
    }
    maven {
	name = "CurseForge"
	url = 'https://www.cursemaven.com'
    }
    maven {
	url = "https://maven.removeco.de/"
    }
    flatDir { dirs "./lib" }
}

dependencies {

    if (project.use_assetmover.toBoolean()) {
	deobfCompile 'com.cleanroommc:assetmover:0.2'
    }
    if (project.use_mixins.toBoolean()) {
	deobfCompile 'zone.rong:mixinbooter:5.0'
    }
    
    // Kotlin
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: "${kotlin_ver}"
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: "${kotlin_ver}"
    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core' , version: "${kotlin_ver}"
    
    //Compile things that need deobf
    deobfCompile project.mcmp_dep
    deobfCompile project.td_dep
    deobfCompile project.hei_dep
    deobfCompile project.lp_dep
    deobfCompile project.rf_dep
    deobfCompile project.ae2_dep

    //compileOnly
    compileOnly project.ccl_dep
    compileOnly group: 'codechicken', name: 'NotEnoughItems', version: '1.12.2-2.4.3.245', classifier: 'deobf', transitive: false

    //runtime so that mods loaded on runClient & runServer
    runtime project.ccl_dep
    runtime project.rs_dep
    runtime project.te_dep
    runtime project.tf_dep
    runtime project.cofhc_dep
    runtime project.cofhw_dep
    runtime project.rf_dep
    runtime project.ae2_dep
}

sourceSets {

    main {
        ext.refMap = 'mixins.' + archives_base_name + '.refmap.json'
    }

}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version
    
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
	rename '(.+_at.cfg)', 'META-INF/$1' // Access Transformers
}
 
jar {
    manifest {
		def attribute_map = [:]
		if (project.use_mixins.toBoolean()) {
			attribute_map['TweakClass'] = 'org.spongepowered.asm.launch.MixinTweaker'
		}
        attributes(attribute_map)
    }
}
